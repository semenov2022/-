#include <iostream>
using namespace std;


void main()
{
	
//ARITHMETICAL_OPERATORS
	//Unary:	+ -
	//Binary:	+ - * / %
	//% - остаток от деления
	//cout << 17 / 3 << endl;
	//cout << 17 % 3 << endl;
	//cout << 3. % 17 << endl;


//ASSIGNMENT_OPERATOR

	//			l-value = r-value;

	//(=) переменной слева (l-value) присваивает значение выражения справа (r-value).
	//Присвоить значит "записать", "сохранить в памяти", "запомнить", "дать значение".
	//r-value - что присваиваем
	//l-value - кому присваиваем
	//int a = 2;	//Переменной 'a' присвоить значение '2'
	//int b = 3;	//Переменной 'b' присвоить значение '3'
	//a = b;		//Переменной 'a' присвоить значение переменной 'b'
	
	
	
	
	//int a, b, c;

	//1. 
	
	//2. Операторы присваивания. Это оператор (=). Имеет низкий приоритет.

	//a = b = c = 0; //ассоциативность справа налево

	// Ассоциативность. У всех операторов С++ ассоциативность слева направо, 
	// кроме присваиваний.
	// У оператора присваивания (=) ассоциативность справа налево
	
	//a = b + c * 4 - 2 * 4;

	//3. Операторы инкремента и декремента
	// Префексная (оператор ПЕРЕД операндом) и постфиксная (оператор ПОСЛЕ операнда) форма записи
	// Данные формы записи отличаются приоритетом по сравнению с другими операторами
	// у ПРЕФИКСНОЙ приоритет ВЫШЕ, чем у других операторов. Самый ВЫСОКИй приоритет
	// у ПОСТФИКСНОЙ приоритет НИЖЕ, чем у других операторов. Самый НИЗКИЙ приоритет, ещё
	// ниже, чем у присваивания



// INCREMENT_DECREMENT
//	int i = 0;
//	++i;	//Prefix increment
//	i++;	//Postfix increment
//	--i;	//Prefix decrement
//	i--;	//Postfix (Suffix) decrement





	/*COMPAUND ASSIGMENTS
	Если переменную нужно увеличить или уменьшить не на 1, а на другое значение,
	то используют составные присваивания. Они предназначены для того, чтобы упростить
	выражения вида:
	а = а + b  оператор сложить
	а += b     оператор прибавить
	-=
	*=
	/=
	%=


	С оператором присваивания можно скомбинировать любой арифметический оператор
	*/

	/*ОПЕРАТОРЫ СРАВНЕНИЯ - COMPARISON OPERATORS
	 ==
	 >
	 <
	 >=
	 <=
	 
	
	  Возвращают значения типа bool: TRUE/FALSE
	  Используются для написания условий. Условия (condition) - это сравнение
	  Условия, состоящие из одной операции сравнения называют ПРОСТЫМ. Простые условия можно
	  объединять в сложные с помощью логических операторов.
	  	
	*/

	/*ЛОГИЧЕСКИЕ ОПЕРАТОРЫ (LOGICAL OPERATORS)
	not - ! - унарный оператор

	or - || - бинарный оператор - логическое сложение 1+0+0 = 1
    Результатом сложного условия || будет TRUE, если результат хотя бы одного простого 
	условия - TRUE


	and - && - бинарный оператор - логическое умножение 1*0*0 = 0
	Результатом сложного условия && будет FALSE, если результат хотя бы одного простого 
	условия - FALSE
		
	
	*/

	cout << (false || false || false) << endl;

}